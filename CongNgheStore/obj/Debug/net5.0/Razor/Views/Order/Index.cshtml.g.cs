#pragma checksum "D:\Ôn C# 2023\CongNgheStore\CongNgheStore\Views\Order\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c48cca792bc3a961d5cc9859733177eb3ab25aea"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Order_Index), @"mvc.1.0.view", @"/Views/Order/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Ôn C# 2023\CongNgheStore\CongNgheStore\Views\_ViewImports.cshtml"
using CongNgheStore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Ôn C# 2023\CongNgheStore\CongNgheStore\Views\_ViewImports.cshtml"
using CongNgheStore.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c48cca792bc3a961d5cc9859733177eb3ab25aea", @"/Views/Order/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"980ca5096ad25b66c297bd844fd6a2a7b1e4d926", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Order_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\Ôn C# 2023\CongNgheStore\CongNgheStore\Views\Order\Index.cshtml"
  
    ViewBag.Title = "Thanh toán";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""render-order"">
    
</div>

<script>
    $(document).ready(function () {

        var order = JSON.parse(window.sessionStorage.getItem('order'));
        if (order == null || order.length == 0) {

            $('.render-order').html(
                '<h4 style=""text-align: center;"">Hiện chưa có sản phẩm nào</h4>'
            );
        }


        else {
            
            $('.render-order').html(
                '<div class=""order-product"">'+
                    '<table class=""table-detail table-hover"">'+
                        '<thead>'+
                            '<tr>'+
                                '<th style=""width: 100px;""></th>'+
                                '<th style=""width: 240px;"">Tên sản phẩm</th>'+
                                '<th style=""width: 120px;"">Ram/Rom</th>'+
                                '<th style=""width: 120px;"">Màu sắc</th>'+
                                '<th style=""width: 120px;"">Giá</th>'+
                             ");
            WriteLiteral(@"   '<th style=""width: 160px;"">Số lượng</th>'+
                            '</tr>'+
                        '</thead>'+
                        '<tbody>'+
                                
                        '</tbody>'+
                    '</table>'+
                '</div>'+
                '<div class=""order-inf"">'+
                    '<form onsubmit=""return false"" id=""order-inf"">'+
                        '<div class=""form-group"">'+
                            '<label for=""PhoneNumber"" class=""control-label"">SĐT người nhận (*): </label>'+
                            '<input  type=""text"" id=""PhoneNumber"" name=""PhoneNumber"" class=""form-control""/>'+
                            '<span for=""PhoneNumber"" class=""text-danger""></span>'+
                        '</div>'+

                        '<div class=""form-group"">'+
                            '<label for=""PhoneNumber"" class=""control-label"">Tên người nhận (*): </label>'+
                            '<input  type=""text"" id=""Name"" name=""Na");
            WriteLiteral(@"me"" class=""form-control""/>'+
                            '<span for=""Name"" class=""text-danger""></span>'+
                        '</div>'+

                        '<div class=""form-group"">'+
                            '<label for=""PhoneNumber"" class=""control-label"">Địa chỉ (*): </label>'+
                            '<input  type=""text"" id=""Address"" name=""Address"" class=""form-control""/>'+
                            '<span for=""Address"" class=""text-danger""></span>'+
                        '</div>'+

                        '<div class=""form-group"">'+
                            '<label for=""PhoneNumber"" class=""control-label"">Ghi chú: </label>'+
                            '<textarea  id=""CustomerNotes"" name=""CustomerNotes"" class=""form-control""></textarea >'+
                            '<span for=""CustomerNotes"" class=""text-danger""></span>'+
                        '</div>'+

                        '<div class=""form-group"" style=""display: flex; justify-content: center;"">'+
               ");
            WriteLiteral(@"             '<button id=""order-sub"" class=""btn btn-success"">Đặt hàng</button>'+
                        '</div>'+
                    '</form>'+
                '</div>'
            );
            
            var total = 0;
            order.forEach(function(product, index, arr){
                
                let formatPrice = new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND',
                });
                new Intl.NumberFormat('en-US').format(price)

                var price = formatPrice.format(product.price);
                
                $('.render-order .order-product tbody').append(
                    '<tr>'+
                        '<td style=""width: 100px;""><img  src=""'+ product.img +'""></td>'+
                        '<td style=""width: 240px;""><a href=""'+ product.productName +'"">'+ product.productName +'</a> </td>'+
                        '<td style=""width: 120px;"">'+ product.rR +'</td>'+
                        ");
            WriteLiteral(@"'<td style=""width: 120px;"">'+ product.colorName +'</td>'+
                        '<td style=""width: 120px;"">'+ price +'</td>'+
                        '<td style=""width: 160px;"">'+
                            '<form onsubmit=""return false"">'+
                                '<div class=""form-group"">'+
                                    '<button class=""btn btn-down"">-</button>'+
                                    `<input name=""quantity"" type=""text""  class=""form-control"" value=""${product.quantity}""/>`+
                                    '<button class=""btn btn-up"">+</button>'+
                                '</div>'+
                            '</form>'+
                        '</td>'+
                    '</tr>'
                );

                total = total + (product.price * product.quantity);
            });
            
            let formatPrice = new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND',
                });
       ");
            WriteLiteral(@"     new Intl.NumberFormat('en-US').format(total)

            var total = formatPrice.format(total);
            $('.render-order .order-product tbody').append(
                '<tr style=""height: 50px; font-weight: 700; font-size: 20px;"">'+
                    '<td style=""text-align: end;"" colspan=""6"">Tổng: <span class=""total"">'+ total +'</span></td>'+
                '</tr>'
            );
            
            //change btn up down
            var btnDowns = document.querySelectorAll('.btn-down');
            btnDowns.forEach(function(btnDown, index, arr){
                btnDown.addEventListener('click', function(event){
                    var btn = event.target;
                    var parent = btn.parentElement;
                    var input = parent.querySelector('input');
                    var val = parseInt(input.value);

                    val -= 1;                
                    if(val < 0) val = 0;

                    input.value = val;

                    Upda");
            WriteLiteral(@"teOrder(index, val);
                });
            });

            var btnUps = document.querySelectorAll('.btn-up');
            btnUps.forEach(function(btnUp, index, arr){
                btnUp.addEventListener('click', function(event){
                    var btn = event.target;
                    var parent = btn.parentElement;
                    var input = parent.querySelector('input');

                    var val = parseInt(input.value);

                    val += 1;
                    input.value = val;

                    UpdateOrder(index, val);
                });
            });

            //input
            var inputs = document.getElementsByName('quantity');
            inputs.forEach(function(input, index, arr){
                //oninput
                input.addEventListener('input', function(event){
                    var inp = event.target;
                    inp.value = inp.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
                });");
            WriteLiteral(@"
                //onchange
                input.addEventListener('change', function(event){
                    var inp = event.target;

                    if(inp.value == null || inp.value == '')
                        inp.value = 0
                    UpdateOrder(index, parseInt(inp.value));
                });
            });
            
            $('#order-sub').click(function() {
                var verifyOrder = VerifyOrder();
                console.log('click');
                if (verifyOrder) {
                    console.log('kiem tra ss');
                    var status = Validation();
                    if(status){
                        console.log('kiem tra status');
                        var urlApi = 'https://localhost:44311/api/';
                        var urlApiOrder = urlApi + 'Order/AddOrder';
                        
                        var order = JSON.parse(window.sessionStorage.getItem('order'));
                        var token = window.localSt");
            WriteLiteral(@"orage.getItem('token');
                        var userId = null;
                        if(token != null){
                            var payload = decodeJwt(token);
                            userId = payload['Id'];
                        }
                        var details = order.map(function(item, index, arr) {
                            return {
                                quantity : item.quantity,
                                color : {
                                    id : item.colorId
                                },
                                memoryAndStorage : {
                                    id : item.memoryAndStorageId
                                },
                                product : {
                                    id : item.productId
                                }
                            };
                        });
                        
                        var now = new Date().toUTCString();
                    ");
            WriteLiteral(@"    var data = {
                            phoneNumber: $('#PhoneNumber').val(),
                            name: $('#Name').val(),
                            address: $('#Address').val(),
                            customerNotes: $('#CustomerNotes').val(),
                            date: now,
                            userId: userId,
                            details: details,
                        };
                        SendRequest(urlApiOrder, data, 'post', true);
                    }
                }
            });
            
        }
        
        function UpdateOrder(ind, value) {
            var order = JSON.parse(window.sessionStorage.getItem('order'));

            order = order.map(function(item, index, arr) {
                if (index == ind) {
                    item.quantity = value;
                }
                return item;
            });

            window.sessionStorage.setItem('order', JSON.stringify(order));

            var cartT");
            WriteLiteral(@"otal = GetCartTotal();           
            $('#cart-total').html(cartTotal);

            let formatPrice = new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND',
                });
            new Intl.NumberFormat('en-US').format(total)

            var total = formatPrice.format(GetTotal());
            $('.render-order .order-product tbody .total').html(
                total
            );
        }
        function GetTotal() {
            var order = JSON.parse(window.sessionStorage.getItem('order'));

            var total = order.reduce(function(accumlator, currentValue, currentIndex, arr){
                return accumlator + (currentValue.quantity * currentValue.price);
            }, 0);
            return total;
        }
        function GetCartTotal() {
            var order = JSON.parse(window.sessionStorage.getItem('order'));

            var cartTotal = order.reduce(function(accumlator, currentValue, currentIndex, arr)");
            WriteLiteral(@"{
                return accumlator + currentValue.quantity;
            }, 0);
            return cartTotal;
        }

        function Validation() {
            var phoneNumber = $('#PhoneNumber');
            var spanPhoneNumber = phoneNumber.parent().children('span');

            var name = $('#Name');
            var spanName = name.parent().children('span');

            var address = $('#Address');
            var spanAddress = address.parent().children('span');

            
            //reset thong bao
            spanPhoneNumber.html('');
            spanName.html('');
            spanAddress.html('');
            var status = true;
            
            //bắt buộc         
            if (phoneNumber.val() === ''){
                spanPhoneNumber.html('Số điện thoại là bắt buộc! ');
                status = false;
            }

            if (name.val() === ''){
                spanName.html('Tên là bắt buộc! ');
                status = false;
            }");
            WriteLiteral(@"
                

            if (address.val() === '') {
                spanAddress.html('Địa chỉ là bắt buộc! ');
                status = false;
            }
                
            //xóa thông báo
            phoneNumber.focus(function() {
                spanPhoneNumber.html('');
            });
            name.focus(function() {
                spanName.html('');
            });
            address.focus(function() {
                spanAddress.html('');
            });
            return status;
        };
        function Message(value) {
            $('#message').html(value);
            $('#message').css('display','inline-block');
            $('#message').addClass('bg-danger');
            $('#message').fadeIn('slow');
            setTimeout(function() {
                $('#message').fadeOut('slow');
            }, 3000);
        }
        function VerifyOrder() {
            var order = JSON.parse(window.sessionStorage.getItem('order'));
            if (orde");
            WriteLiteral(@"r == null || order.length == 0) {              
                Message('Đơn hàng chưa có sản phẩm nào!');
                return false;
            }
            return true;
        };

        function SendRequest(url, data, method, async) {
            $.ajax({
                url: url,
                async: async,
                data: JSON.stringify(data),
                error: function(response) {
                    Message('Đặt hàng không thành công!');
                },
                success: function(response) {
                    window.sessionStorage.setItem('order', JSON.stringify([]));
                    window.sessionStorage.setItem('order-succeed', response);
                    window.sessionStorage.setItem('message', 'Đặt hàng thành công!');
                    window.location.href = '/Order/Check';
                },
                type: method,
                headers: {'Content-Type': 'application/json'},
                contentType: 'application/json; char");
            WriteLiteral(@"set=utf-8',
                dataType: 'json'
            });
        }
        function decodeJwt(token) {
            var base64Url = token.split('.')[1];
            var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));

            return JSON.parse(jsonPayload);
        }
        
    });
</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
